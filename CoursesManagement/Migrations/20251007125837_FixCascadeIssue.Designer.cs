// <auto-generated />
using System;
using CoursesManagement;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoursesManagement.Migrations
{
    [DbContext(typeof(CoursesDbContext))]
    [Migration("20251007125837_FixCascadeIssue")]
    partial class FixCascadeIssue
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("courses")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryPrograms", b =>
                {
                    b.Property<Guid>("CategoriesCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProgramsProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoriesCategoryId", "ProgramsProgramId");

                    b.HasIndex("ProgramsProgramId");

                    b.ToTable("ProgramCategories", "courses");
                });

            modelBuilder.Entity("CoursePrograms", b =>
                {
                    b.Property<Guid>("CoursesCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProgramsProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CoursesCourseId", "ProgramsProgramId");

                    b.HasIndex("ProgramsProgramId");

                    b.ToTable("ProgramCourses", "courses");
                });

            modelBuilder.Entity("CoursesManagement.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.ToTable("Categories", "courses");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CategoryDescription = "C#, ASP.NET Core, SQL Server, APIs",
                            CategoryName = "Backend Development",
                            CreatedAt = new DateTime(2025, 10, 7, 12, 58, 35, 721, DateTimeKind.Utc).AddTicks(7717)
                        },
                        new
                        {
                            CategoryId = new Guid("44444444-4444-4444-4444-444444444444"),
                            CategoryDescription = "Data visualization and analytics tools.",
                            CategoryName = "Data Analytics",
                            CreatedAt = new DateTime(2025, 10, 7, 12, 58, 35, 721, DateTimeKind.Utc).AddTicks(8721)
                        });
                });

            modelBuilder.Entity("CoursesManagement.Models.Certificate", b =>
                {
                    b.Property<Guid>("CertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CertificateUrl")
                        .IsRequired()
                        .HasMaxLength(520)
                        .HasColumnType("nvarchar(520)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EnrollmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CertificateId");

                    b.HasIndex("CertificateUrl")
                        .IsUnique();

                    b.HasIndex("CourseId");

                    b.HasIndex("EnrollmentId");

                    b.ToTable("Certificates", "courses");
                });

            modelBuilder.Entity("CoursesManagement.Models.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("CourseLevel")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CourseId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CourseName");

                    b.ToTable("Courses", "courses");

                    b.HasData(
                        new
                        {
                            CourseId = new Guid("55555555-5555-5555-5555-555555555555"),
                            CategoryId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CourseDescription = "Learn how to build REST APIs using .NET Core.",
                            CourseLevel = 1,
                            CourseName = "ASP.NET Core Fundamentals",
                            CreatedAt = new DateTime(2025, 10, 7, 12, 58, 35, 721, DateTimeKind.Utc).AddTicks(9472),
                            Price = 0m
                        },
                        new
                        {
                            CourseId = new Guid("66666666-6666-6666-6666-666666666666"),
                            CategoryId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CourseDescription = "Database management with SQL Server and EF Core ORM.",
                            CourseLevel = 0,
                            CourseName = "SQL Server & EF Core",
                            CreatedAt = new DateTime(2025, 10, 7, 12, 58, 35, 722, DateTimeKind.Utc).AddTicks(1171),
                            Price = 0m
                        },
                        new
                        {
                            CourseId = new Guid("77777777-7777-7777-7777-777777777777"),
                            CategoryId = new Guid("44444444-4444-4444-4444-444444444444"),
                            CourseDescription = "Introduction to ML algorithms and data preprocessing.",
                            CourseLevel = 1,
                            CourseName = "Machine Learning 101",
                            CreatedAt = new DateTime(2025, 10, 7, 12, 58, 35, 722, DateTimeKind.Utc).AddTicks(1176),
                            Price = 0m
                        });
                });

            modelBuilder.Entity("CoursesManagement.Models.Enrollment", b =>
                {
                    b.Property<Guid>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EnrolledAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Grade")
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid?>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StatusChangeReason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("ProgramId");

                    b.ToTable("Enrollments", "courses");

                    b.HasData(
                        new
                        {
                            EnrollmentId = new Guid("aaaa1111-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CourseId = new Guid("55555555-5555-5555-5555-555555555555"),
                            EnrolledAt = new DateTime(2025, 9, 17, 12, 58, 35, 722, DateTimeKind.Utc).AddTicks(3683),
                            ProgramId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Status = "Active",
                            UserId = new Guid("99999999-9999-9999-9999-999999999999")
                        },
                        new
                        {
                            EnrollmentId = new Guid("bbbb2222-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CourseId = new Guid("66666666-6666-6666-6666-666666666666"),
                            EnrolledAt = new DateTime(2025, 8, 23, 12, 58, 35, 722, DateTimeKind.Utc).AddTicks(5009),
                            Grade = 91.5m,
                            ProgramId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Status = "Completed",
                            StatusChangeReason = "Finished successfully",
                            UserId = new Guid("88888888-8888-8888-8888-888888888888")
                        },
                        new
                        {
                            EnrollmentId = new Guid("cccc3333-cccc-cccc-cccc-cccccccccccc"),
                            CourseId = new Guid("77777777-7777-7777-7777-777777777777"),
                            EnrolledAt = new DateTime(2025, 9, 27, 12, 58, 35, 722, DateTimeKind.Utc).AddTicks(5418),
                            ProgramId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Status = "Active",
                            UserId = new Guid("77777777-7777-4444-8888-111111111111")
                        },
                        new
                        {
                            EnrollmentId = new Guid("dddd4444-dddd-dddd-dddd-dddddddddddd"),
                            CourseId = new Guid("66666666-6666-6666-6666-666666666666"),
                            EnrolledAt = new DateTime(2025, 10, 2, 12, 58, 35, 722, DateTimeKind.Utc).AddTicks(5422),
                            ProgramId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Status = "Dropped",
                            StatusChangeReason = "Dropped due to absence",
                            UserId = new Guid("99999999-9999-9999-9999-999999999999")
                        });
                });

            modelBuilder.Entity("CoursesManagement.Models.Programs", b =>
                {
                    b.Property<Guid>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProgramDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Roadmap")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProgramId");

                    b.HasIndex("ProgramName")
                        .IsUnique();

                    b.ToTable("Programs", "courses");

                    b.HasData(
                        new
                        {
                            ProgramId = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 10, 7, 12, 58, 35, 721, DateTimeKind.Utc).AddTicks(5097),
                            ProgramDescription = "Full stack software engineering program.",
                            ProgramName = "Software Engineering",
                            Roadmap = "Backend → Frontend → DevOps"
                        },
                        new
                        {
                            ProgramId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 10, 7, 12, 58, 35, 721, DateTimeKind.Utc).AddTicks(6767),
                            ProgramDescription = "Learn Python, statistics, and ML models.",
                            ProgramName = "Data Science",
                            Roadmap = "Python → Statistics → ML → Deployment"
                        });
                });

            modelBuilder.Entity("CategoryPrograms", b =>
                {
                    b.HasOne("CoursesManagement.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoursesManagement.Models.Programs", null)
                        .WithMany()
                        .HasForeignKey("ProgramsProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoursePrograms", b =>
                {
                    b.HasOne("CoursesManagement.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoursesManagement.Models.Programs", null)
                        .WithMany()
                        .HasForeignKey("ProgramsProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoursesManagement.Models.Certificate", b =>
                {
                    b.HasOne("CoursesManagement.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoursesManagement.Models.Enrollment", "Enrollment")
                        .WithMany("Certificates")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Enrollment");
                });

            modelBuilder.Entity("CoursesManagement.Models.Course", b =>
                {
                    b.HasOne("CoursesManagement.Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CoursesManagement.Models.Enrollment", b =>
                {
                    b.HasOne("CoursesManagement.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoursesManagement.Models.Programs", "Program")
                        .WithMany("Enrollments")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Course");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("CoursesManagement.Models.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("CoursesManagement.Models.Course", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("CoursesManagement.Models.Enrollment", b =>
                {
                    b.Navigation("Certificates");
                });

            modelBuilder.Entity("CoursesManagement.Models.Programs", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
