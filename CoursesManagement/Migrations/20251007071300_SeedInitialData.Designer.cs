// <auto-generated />
using System;
using CoursesManagement;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoursesManagement.Migrations
{
    [DbContext(typeof(CoursesDbContext))]
    [Migration("20251007071300_SeedInitialData")]
    partial class SeedInitialData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("courses")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryPrograms", b =>
                {
                    b.Property<Guid>("CategoriesCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProgramsProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoriesCategoryId", "ProgramsProgramId");

                    b.HasIndex("ProgramsProgramId");

                    b.ToTable("ProgramCategories", "courses");
                });

            modelBuilder.Entity("CoursePrograms", b =>
                {
                    b.Property<Guid>("CoursesCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProgramsProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CoursesCourseId", "ProgramsProgramId");

                    b.HasIndex("ProgramsProgramId");

                    b.ToTable("ProgramCourses", "courses");
                });

            modelBuilder.Entity("CoursesManagement.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.ToTable("Categories", "courses");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("91afe1cd-ecef-4512-8f0c-90c37308d289"),
                            CategoryDescription = "C#, ASP.NET Core, SQL Server, APIs",
                            CategoryName = "Backend Development",
                            CreatedAt = new DateTime(2025, 10, 7, 7, 13, 0, 97, DateTimeKind.Utc).AddTicks(8893)
                        },
                        new
                        {
                            CategoryId = new Guid("4ce6fe4b-998c-4ffc-b28e-558f0b3d9ed8"),
                            CategoryDescription = "Data visualization and analytics tools.",
                            CategoryName = "Data Analytics",
                            CreatedAt = new DateTime(2025, 10, 7, 7, 13, 0, 97, DateTimeKind.Utc).AddTicks(9252)
                        });
                });

            modelBuilder.Entity("CoursesManagement.Models.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("CourseLevel")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CourseId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CourseName");

                    b.ToTable("Courses", "courses");

                    b.HasData(
                        new
                        {
                            CourseId = new Guid("62a6b9b5-98f6-4830-948b-057a237c10e4"),
                            CategoryId = new Guid("91afe1cd-ecef-4512-8f0c-90c37308d289"),
                            CourseDescription = "Learn how to build REST APIs using .NET Core.",
                            CourseLevel = 1,
                            CourseName = "ASP.NET Core Fundamentals",
                            CreatedAt = new DateTime(2025, 10, 7, 7, 13, 0, 98, DateTimeKind.Utc).AddTicks(655),
                            Price = 0m
                        },
                        new
                        {
                            CourseId = new Guid("c4543298-a635-439e-adc4-65f6c56ffee0"),
                            CategoryId = new Guid("91afe1cd-ecef-4512-8f0c-90c37308d289"),
                            CourseDescription = "Database management with SQL Server and EF Core ORM.",
                            CourseLevel = 0,
                            CourseName = "SQL Server & EF Core",
                            CreatedAt = new DateTime(2025, 10, 7, 7, 13, 0, 98, DateTimeKind.Utc).AddTicks(785),
                            Price = 0m
                        },
                        new
                        {
                            CourseId = new Guid("709e9037-0d5f-4dab-a947-63715a459b68"),
                            CategoryId = new Guid("4ce6fe4b-998c-4ffc-b28e-558f0b3d9ed8"),
                            CourseDescription = "Introduction to ML algorithms and data preprocessing.",
                            CourseLevel = 1,
                            CourseName = "Machine Learning 101",
                            CreatedAt = new DateTime(2025, 10, 7, 7, 13, 0, 98, DateTimeKind.Utc).AddTicks(788),
                            Price = 0m
                        });
                });

            modelBuilder.Entity("CoursesManagement.Models.Enrollment", b =>
                {
                    b.Property<Guid>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EnrolledAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Grade")
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid?>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StatusChangeReason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("ProgramId");

                    b.ToTable("Enrollments", "courses");
                });

            modelBuilder.Entity("CoursesManagement.Models.Programs", b =>
                {
                    b.Property<Guid>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProgramDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Roadmap")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProgramId");

                    b.HasIndex("ProgramName")
                        .IsUnique();

                    b.ToTable("Programs", "courses");

                    b.HasData(
                        new
                        {
                            ProgramId = new Guid("0034175c-aa25-47e4-a13d-aa115a3b997e"),
                            CreatedAt = new DateTime(2025, 10, 7, 7, 13, 0, 97, DateTimeKind.Utc).AddTicks(7750),
                            ProgramDescription = "Full stack software engineering program.",
                            ProgramName = "Software Engineering",
                            Roadmap = "Backend → Frontend → DevOps"
                        },
                        new
                        {
                            ProgramId = new Guid("d8bcb22a-bfb5-4314-a024-3fe180be0e0f"),
                            CreatedAt = new DateTime(2025, 10, 7, 7, 13, 0, 97, DateTimeKind.Utc).AddTicks(7893),
                            ProgramDescription = "Learn Python, statistics, and ML models.",
                            ProgramName = "Data Science",
                            Roadmap = "Python → Statistics → ML → Deployment"
                        });
                });

            modelBuilder.Entity("CategoryPrograms", b =>
                {
                    b.HasOne("CoursesManagement.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoursesManagement.Models.Programs", null)
                        .WithMany()
                        .HasForeignKey("ProgramsProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoursePrograms", b =>
                {
                    b.HasOne("CoursesManagement.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoursesManagement.Models.Programs", null)
                        .WithMany()
                        .HasForeignKey("ProgramsProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoursesManagement.Models.Course", b =>
                {
                    b.HasOne("CoursesManagement.Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CoursesManagement.Models.Enrollment", b =>
                {
                    b.HasOne("CoursesManagement.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoursesManagement.Models.Programs", "Program")
                        .WithMany("Enrollments")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Course");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("CoursesManagement.Models.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("CoursesManagement.Models.Course", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("CoursesManagement.Models.Programs", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
