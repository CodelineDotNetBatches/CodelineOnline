// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReportsManagements;

#nullable disable

namespace ReportsManagements.Migrations
{
    [DbContext(typeof(ReportsDbContext))]
    partial class ReportsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("reports")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ReportsManagements.Models.AttendanceRecord", b =>
            modelBuilder.Entity("ReportsManagements.Models.Branch", b =>
                {
                    b.Property<int>("AttId")
<<<<<<< HEAD
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttId"));

                    b.Property<int?>("CapturedPhotoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FaceMatchScore")
                        .HasColumnType("float");

                    b.Property<int>("GeolocationId")
                        .HasColumnType("int");

                    b.Property<double>("LivenessScore")
                        .HasColumnType("float");

                    b.Property<int?>("ReasonCodeId")
                        .HasColumnType("int");

                    b.Property<string>("ReviewStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttId");

                    b.HasIndex("CapturedPhotoId");

                    b.HasIndex("GeolocationId");

                    b.HasIndex("ReasonCodeId");

                    b.ToTable("AttendanceRecord", "reports");
                });

            modelBuilder.Entity("ReportsManagements.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));
>>>>>>> ReasonAndFiles

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

<<<<<<< HEAD
                    b.HasKey("BranchId");
=======
                    b.HasKey("Id");
>>>>>>> ReasonAndFiles

                    b.ToTable("Branches", "reports");
                });

            modelBuilder.Entity("ReportsManagements.Models.BranchReport", b =>
                {
                    b.Property<int>("BranchReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchReportId"));

                    b.Property<int>("AttendanceRate")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("TotalInstructors")
                        .HasColumnType("int");

                    b.Property<int>("TotalSessions")
                        .HasColumnType("int");

                    b.Property<int>("TotalStudents")
                        .HasColumnType("int");

                    b.HasKey("BranchReportId");

                    b.ToTable("BranchReports", "reports");
                });

<<<<<<< HEAD
            modelBuilder.Entity("ReportsManagements.Models.CourseReport", b =>
                {
                    b.Property<int>("CourseReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseReportId"));

                    b.Property<decimal>("AverageAttendanceRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("TotalSessions")
                        .HasColumnType("int");

                    b.Property<int>("TotalStudents")
                        .HasColumnType("int");

                    b.HasKey("CourseReportId");

                    b.ToTable("CourseReports", "reports");
                });

=======
>>>>>>> ReasonAndFiles
            modelBuilder.Entity("ReportsManagements.Models.FileStorage", b =>
                {
                    b.Property<int>("FileStorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileStorageId"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FileStorageId");

                    b.ToTable("FileStorages", "reports");
                });

            modelBuilder.Entity("ReportsManagements.Models.Geolocation", b =>
                {
                    b.Property<int>("GeolocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GeolocationId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

<<<<<<< HEAD
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

=======
>>>>>>> ReasonAndFiles
                    b.Property<decimal>("RediusMeters")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("GeolocationId");

                    b.ToTable("Geolocations", "reports");
                });

            modelBuilder.Entity("ReportsManagements.Models.ReasonCode", b =>
                {
                    b.Property<int>("ReasonCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReasonCodeId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReasonCodeId");

                    b.ToTable("ReasonCodes", "reports");
<<<<<<< HEAD
                });

            modelBuilder.Entity("ReportsManagements.Models.AttendanceRecord", b =>
            modelBuilder.Entity("ReportsManagements.Models.TrainerReport", b =>
                {
                    b.Property<int>("TrainerReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");
                    b.HasOne("ReportsManagements.Models.FileStorage", "CapturedPhoto")
                        .WithMany()
                        .HasForeignKey("CapturedPhotoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReportsManagements.Models.Geolocation", "Geolocation")
                        .WithMany("AttendanceRecords")
                        .HasForeignKey("GeolocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainerReportId"));

                    b.Property<decimal>("AttendanceRate")
                        .HasColumnType("decimal(18,2)");
                    b.HasOne("ReportsManagements.Models.ReasonCode", "ReasonCode")
                        .WithMany()
                        .HasForeignKey("ReasonCodeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("TotalSessions")
                        .HasColumnType("int");

                    b.Property<int>("TotalStudents")
                        .HasColumnType("int");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");
                    b.Navigation("CapturedPhoto");

                    b.Navigation("Geolocation");
                    b.HasKey("TrainerReportId");

                    b.Navigation("ReasonCode");
                });
                    b.ToTable("TrainerReports", "reports");
=======

                    b.HasData(
                        new
                        {
                            ReasonCodeId = 1,
                            Category = "Attendance",
                            Code = "LATE",
                            IsActive = true,
                            Name = "Late"
                        },
                        new
                        {
                            ReasonCodeId = 2,
                            Category = "Health",
                            Code = "SICK",
                            IsActive = true,
                            Name = "Sick"
                        },
                        new
            modelBuilder.Entity("ReportsManagements.Models.Geolocation", b =>
                        {
                    b.Navigation("AttendanceRecords");
                            ReasonCodeId = 3,
                            Category = "System",
                            Code = "TECH",
                            IsActive = true,
                            Name = "Technical Issue"
                        });
>>>>>>> ReasonAndFiles
                });
#pragma warning restore 612, 618
        }
    }
}
