// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserManagement;

#nullable disable

namespace UserManagement.Migrations
{
    [DbContext(typeof(UsersDbContext))]
    partial class UsersDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("users")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BatchInstructor", b =>
                {
                    b.Property<int>("BatchesBatchId")
                        .HasColumnType("int");

                    b.Property<int>("InstructorsInstructorId")
                        .HasColumnType("int");

                    b.HasKey("BatchesBatchId", "InstructorsInstructorId");

                    b.HasIndex("InstructorsInstructorId");

                    b.ToTable("BatchInstructor", "users");
                });

            modelBuilder.Entity("InstructorTrainee", b =>
                {
                    b.Property<int>("InstructorsInstructorId")
                        .HasColumnType("int");

                    b.Property<int>("TraineesTraineeId")
                        .HasColumnType("int");

                    b.HasKey("InstructorsInstructorId", "TraineesTraineeId");

                    b.HasIndex("TraineesTraineeId");

                    b.ToTable("InstructorTrainee", "users");
                });

            modelBuilder.Entity("UserManagement.Models.Admin_Profile", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.HasKey("AdminId");

                    b.HasIndex("BranchId");

                    b.ToTable("AdminProfiles", "users");

                    b.HasData(
                        new
                        {
                            AdminId = 1,
                            BranchId = 0
                        },
                        new
                        {
                            AdminId = 2,
                            BranchId = 0
                        },
                        new
                        {
                            AdminId = 3,
                            BranchId = 0
                        });
                });

            modelBuilder.Entity("UserManagement.Models.Availability", b =>
                {
                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("time")
                        .HasColumnType("time");

                    b.Property<int>("Avail_Status")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<int>("avilabilityId")
                        .HasColumnType("int");

                    b.Property<int>("day_of_week")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("InstructorId", "time");

                    b.HasIndex("Avail_Status");

                    b.HasIndex("avilabilityId")
                        .IsUnique();

                    b.ToTable("Availabilities", "users");
                });

            modelBuilder.Entity("UserManagement.Models.Batch", b =>
                {
                    b.Property<int>("BatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BatchId"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("BatchDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("BatchEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BatchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("BatchStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BatchStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BatchTimeline")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("admin_ProfileAdminId")
                        .HasColumnType("int");

                    b.HasKey("BatchId");

                    b.HasIndex("BatchName")
                        .IsUnique();

                    b.HasIndex("BranchId");

                    b.HasIndex("admin_ProfileAdminId");

                    b.ToTable("Batches", "users");
                });

            modelBuilder.Entity("UserManagement.Models.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"));

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("BranchId");

                    b.ToTable("branchs", "users");
                });

            modelBuilder.Entity("UserManagement.Models.BranchPN", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.HasKey("BranchId", "PhoneNumber");

                    b.ToTable("branchPNs", "users");
                });

            modelBuilder.Entity("UserManagement.Models.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("Experience_Level")
                        .HasMaxLength(30)
                        .HasColumnType("int");

                    b.Property<string>("GithubUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InstructorCV")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Specialization")
                        .HasMaxLength(80)
                        .HasColumnType("int");

                    b.Property<int>("Teaching_Style")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("Years_of_Experience")
                        .HasColumnType("int");

                    b.HasKey("InstructorId");

                    b.HasIndex("BranchId");

                    b.HasIndex("Specialization");

                    b.ToTable("Instructors", "users");
                });

            modelBuilder.Entity("UserManagement.Models.InstructorSkill", b =>
                {
                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<string>("SkillName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("InstructorSkillId")
                        .HasColumnType("int");

                    b.Property<int?>("MonthsOfExperience")
                        .HasColumnType("int");

                    b.Property<string>("SkillLevel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstructorId", "SkillName");

                    b.HasIndex("InstructorSkillId");

                    b.ToTable("InstructorSkills", "users");
                });

            modelBuilder.Entity("UserManagement.Models.Responsibility", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("ResponsibilityTitle")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("AdminProfileAdminId")
                        .HasColumnType("int");

                    b.Property<string>("ResponsibilityDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId", "ResponsibilityTitle");

                    b.HasIndex("AdminProfileAdminId");

                    b.HasIndex("ResponsibilityTitle")
                        .IsUnique();

                    b.ToTable("Responsibilities", "users");
                });

            modelBuilder.Entity("UserManagement.Models.Room", b =>
                {
                    b.Property<string>("RoomNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoomNumber");

                    b.HasIndex("BranchId");

                    b.ToTable("rooms", "users");
                });

            modelBuilder.Entity("UserManagement.Models.Trainee", b =>
                {
                    b.Property<int>("TraineeId")
                        .HasColumnType("int");

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("EducationalBackground")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Experience_Level")
                        .HasColumnType("int");

                    b.Property<string>("GithubUsername")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LearningObjectives")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Learning_Style")
                        .HasColumnType("int");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Study_Focus")
                        .HasColumnType("int");

                    b.Property<string>("TraineeCV")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Years_of_Experience")
                        .HasColumnType("int");

                    b.HasKey("TraineeId");

                    b.HasIndex("BatchId");

                    b.HasIndex("BranchId");

                    b.ToTable("Trainees", "users");
                });

            modelBuilder.Entity("UserManagement.Models.TraineeSkill", b =>
                {
                    b.Property<int>("TraineeId")
                        .HasColumnType("int");

                    b.Property<string>("SkillName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("MonthsOfExperience")
                        .HasColumnType("int");

                    b.Property<string>("SkillLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TraineeSkillId")
                        .HasColumnType("int");

                    b.HasKey("TraineeId", "SkillName");

                    b.HasIndex("TraineeSkillId");

                    b.ToTable("TraineeSkills", "users");
                });

            modelBuilder.Entity("BatchInstructor", b =>
                {
                    b.HasOne("UserManagement.Models.Batch", null)
                        .WithMany()
                        .HasForeignKey("BatchesBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserManagement.Models.Instructor", null)
                        .WithMany()
                        .HasForeignKey("InstructorsInstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InstructorTrainee", b =>
                {
                    b.HasOne("UserManagement.Models.Instructor", null)
                        .WithMany()
                        .HasForeignKey("InstructorsInstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserManagement.Models.Trainee", null)
                        .WithMany()
                        .HasForeignKey("TraineesTraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserManagement.Models.Admin_Profile", b =>
                {
                    b.HasOne("UserManagement.Models.Branch", "branchs")
                        .WithMany("Admin_Profiles")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("branchs");
                });

            modelBuilder.Entity("UserManagement.Models.Availability", b =>
                {
                    b.HasOne("UserManagement.Models.Instructor", "Instructor")
                        .WithMany("Availabilities")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("UserManagement.Models.Batch", b =>
                {
                    b.HasOne("UserManagement.Models.Branch", "branchs")
                        .WithMany("batches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserManagement.Models.Admin_Profile", "admin_Profile")
                        .WithMany("Batchs")
                        .HasForeignKey("admin_ProfileAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("admin_Profile");

                    b.Navigation("branchs");
                });

            modelBuilder.Entity("UserManagement.Models.BranchPN", b =>
                {
                    b.HasOne("UserManagement.Models.Branch", "branchs")
                        .WithMany("branchPNs")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("branchs");
                });

            modelBuilder.Entity("UserManagement.Models.Instructor", b =>
                {
                    b.HasOne("UserManagement.Models.Branch", "branch")
                        .WithMany("instructors")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("branch");
                });

            modelBuilder.Entity("UserManagement.Models.InstructorSkill", b =>
                {
                    b.HasOne("UserManagement.Models.Instructor", "Instructor")
                        .WithMany("instructorSkills")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("UserManagement.Models.Responsibility", b =>
                {
                    b.HasOne("UserManagement.Models.Admin_Profile", "AdminProfile")
                        .WithMany("Responsibilitys")
                        .HasForeignKey("AdminProfileAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminProfile");
                });

            modelBuilder.Entity("UserManagement.Models.Room", b =>
                {
                    b.HasOne("UserManagement.Models.Branch", "branchs")
                        .WithMany("rooms")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("branchs");
                });

            modelBuilder.Entity("UserManagement.Models.Trainee", b =>
                {
                    b.HasOne("UserManagement.Models.Batch", "Batch")
                        .WithMany("Trainees")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserManagement.Models.Branch", "branch")
                        .WithMany("trainees")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("branch");
                });

            modelBuilder.Entity("UserManagement.Models.TraineeSkill", b =>
                {
                    b.HasOne("UserManagement.Models.Trainee", "Trainee")
                        .WithMany("traineeSkills")
                        .HasForeignKey("TraineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("UserManagement.Models.Admin_Profile", b =>
                {
                    b.Navigation("Batchs");

                    b.Navigation("Responsibilitys");
                });

            modelBuilder.Entity("UserManagement.Models.Batch", b =>
                {
                    b.Navigation("Trainees");
                });

            modelBuilder.Entity("UserManagement.Models.Branch", b =>
                {
                    b.Navigation("Admin_Profiles");

                    b.Navigation("batches");

                    b.Navigation("branchPNs");

                    b.Navigation("instructors");

                    b.Navigation("rooms");

                    b.Navigation("trainees");
                });

            modelBuilder.Entity("UserManagement.Models.Instructor", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("instructorSkills");
                });

            modelBuilder.Entity("UserManagement.Models.Trainee", b =>
                {
                    b.Navigation("traineeSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
